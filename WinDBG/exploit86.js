"use strict";

function initializeScript() {
    return [new host.apiVersionSupport(1, 7)];
}

function FindPPR(beginning, end) {
    var DbgPrint = host.diagnostics.debugLog;
    DbgPrint("[>] Searching for POP/POP/RET in given memory region ...\n");

    if (end < beginning) {
        DbgPrint("Invalid beginning end region provided!\n");
        return;
    }

    var length = end - beginning;
    var MemoryRegion = host.memory.readMemoryValues(beginning, length);

    var cx = 0x00;
    for (; cx < length; cx++) {

        var b1 = MemoryRegion[cx];
        var b2 = MemoryRegion[cx + 1];
        var b3 = MemoryRegion[cx + 2];
        if (b3 != 0xC3)
            continue;

        if (b1 >= 0x58 && b1 <= 0x5F && b1 != 0x5C) {
            if (b2 >= 0x58 && b2 <= 0x5F && b2 != 0x5C) {
                

                DbgPrint(
                    "0x" + Number(beginning + cx).toString(16) + "\t" +
                    _FindPPRInternal(b1) + "; " + _FindPPRInternal(b2) + "; ret (" +
                    Number(b1).toString(16) + Number(b2).toString(16) + Number(b3).toString(16) + ")\n"
                );
            }
        }
    }
}

function _FindPPRInternal(byte) {
    switch (byte){
        case 0x58:
            return "pop eax";
        case 0x59:
            return "pop ecx";
        case 0x5A:
            return "pop edx";
        case 0x5B:
            return "pop ebx";
        case 0x5D:
            return "pop ebp";
        case 0x5E:
            return "pop esi";
        case 0x5F:
            return "pop edi";
    }
}

function GetModulesCharacteristics(IncludeSystem32) {
    var DbgPrint = host.diagnostics.debugLog;
    DbgPrint("[>] Listing current process modules characteristics ...\n");

    var Modules = host.currentProcess.Modules;
    for (var Module of Modules) {
        if (!IncludeSystem32 && Module.Name.toLowerCase().indexOf("system32") !== -1)
            continue;

        var DllCharacteristics = Module.Contents.Headers.OptionalHeader.DllCharacteristics;
        var SEH = (DllCharacteristics & 1024) === 1024 ? "TRUE " : "FALSE";
        var DEP = (DllCharacteristics & 256) === 256 ? "TRUE " : "FALSE";
        var ASLR = (DllCharacteristics & 64) === 64 ? "TRUE " : "FALSE";

        DbgPrint(
            "0x" + Number(Module.BaseAddress).toString(16) + "\t" +
            "0x" + Number(Module.BaseAddress + Module.Size).toString(16) + "\t" +
            SEH + "(SEH)\t" +
            DEP + "(DEP)\t" +
            ASLR + "(ASLR)\t" +
            Module.Name + "\n"
        );
    }
}
